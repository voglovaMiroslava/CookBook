package com.mycompany.cookbook.gui;

import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.time.Duration;
import eu.dominiktousek.pv168.cookbook.Ingredient;
import eu.dominiktousek.pv168.cookbook.IngredientAmount;
import eu.dominiktousek.pv168.cookbook.IngredientAmountManagerImpl;
import eu.dominiktousek.pv168.cookbook.IngredientManagerImpl;
import eu.dominiktousek.pv168.cookbook.Recipe;
import eu.dominiktousek.pv168.cookbook.RecipeManagerImpl;
import eu.dominiktousek.pv168.cookbook.ServiceFailureException;
import java.util.concurrent.ExecutionException;
import javax.swing.ComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Miroslava
 */
public class MainForm extends javax.swing.JFrame {

    final static Logger LOG = LoggerFactory.getLogger(MainForm.class);

    /**
     * Creates new form CookBook
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        tabbedPanel = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableIngredient = new javax.swing.JTable();
        buttRemoveIng = new javax.swing.JButton();
        buttEditIng = new javax.swing.JButton();
        buttSearchIng = new javax.swing.JButton();
        buttAddIng = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        fieldIngredientName = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        buttShowDetail = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableRecipe = new javax.swing.JTable();
        buttRemoveRecipe = new javax.swing.JButton();
        buttAddRecipe = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        comboTimeTo = new javax.swing.JComboBox<String>();
        spinnerTimeTo = new javax.swing.JSpinner();
        comboTimeFrom = new javax.swing.JComboBox<String>();
        spinnerTimeFrom = new javax.swing.JSpinner();
        buttSearchRec = new javax.swing.JButton();
        fieldName = new javax.swing.JTextField();
        buttSelectIng = new javax.swing.JButton();
        checkByDuration = new javax.swing.JCheckBox();
        checkByIngredients = new javax.swing.JCheckBox();
        checkByName = new javax.swing.JCheckBox();
        comboSearchIngredients = new javax.swing.JComboBox<String>();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuShowRecipes = new javax.swing.JMenuItem();
        menuShowIngredience = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuAddRecipe = new javax.swing.JMenuItem();
        menuAddIng = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tabbedPanel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        tabbedPanel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tabbedPanelFocusGained(evt);
            }
        });

        tableIngredient.setModel(new IngredientTableModel());
        tableIngredient.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        buttSearchIngActionPerformed(new java.awt.event.ActionEvent(new Object(), 0, "click"));
        tableIngredient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableIngredientMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableIngredient);

        buttRemoveIng.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mycompany/cookbook/gui/Bundle"); // NOI18N
        buttRemoveIng.setText(bundle.getString("removeIngredient")); // NOI18N
        buttRemoveIng.setEnabled(false);
        buttRemoveIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttRemoveIngActionPerformed(evt);
            }
        });

        buttEditIng.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttEditIng.setText(bundle.getString("editIngredient")); // NOI18N
        buttEditIng.setEnabled(false);
        buttEditIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttEditIngActionPerformed(evt);
            }
        });

        buttSearchIng.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttSearchIng.setText(bundle.getString("search")); // NOI18N
        buttSearchIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttSearchIngActionPerformed(evt);
            }
        });

        buttAddIng.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttAddIng.setText(bundle.getString("addNew")); // NOI18N
        buttAddIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttAddIngActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText(bundle.getString("searchByName")); // NOI18N

        fieldIngredientName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldIngredientNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(1, 1, 1)
                        .addComponent(fieldIngredientName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttSearchIng, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
                        .addComponent(buttAddIng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttEditIng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttRemoveIng)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttAddIng, buttEditIng, buttRemoveIng});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttRemoveIng)
                    .addComponent(buttEditIng)
                    .addComponent(buttSearchIng)
                    .addComponent(buttAddIng)
                    .addComponent(jLabel2)
                    .addComponent(fieldIngredientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttAddIng, buttEditIng, buttRemoveIng, buttSearchIng, fieldIngredientName});

        tabbedPanel.addTab(bundle.getString("ingredients"), jPanel2); // NOI18N

        buttShowDetail.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttShowDetail.setText(bundle.getString("showDetail")); // NOI18N
        buttShowDetail.setEnabled(false);
        buttShowDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttShowDetailActionPerformed(evt);
            }
        });

        tableRecipe.setModel(new RecipeTableModel());
        tableRecipe.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableRecipe.setAutoscrolls(false);
        tableRecipe.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        buttSearchRecActionPerformed(new java.awt.event.ActionEvent(new Object(),0,"click"));
        tableRecipe.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableRecipeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableRecipe);

        buttRemoveRecipe.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttRemoveRecipe.setText(bundle.getString("removeRecipe")); // NOI18N
        buttRemoveRecipe.setEnabled(false);
        buttRemoveRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttRemoveRecipeActionPerformed(evt);
            }
        });

        buttAddRecipe.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttAddRecipe.setText(bundle.getString("addNewRecipe")); // NOI18N
        buttAddRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttAddRecipeActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel5.setText(bundle.getString("to")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setText(bundle.getString("from")); // NOI18N

        comboTimeTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { bundle.getString("minute(s)"), bundle.getString("hour(s)"), bundle.getString("day(s)") }));

        comboTimeFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { bundle.getString("minute(s)"), bundle.getString("hour(s)"), bundle.getString("day(s)") }));

        spinnerTimeFrom.setModel(new javax.swing.SpinnerNumberModel());

        buttSearchRec.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttSearchRec.setText(bundle.getString("search")); // NOI18N
        buttSearchRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttSearchRecActionPerformed(evt);
            }
        });

        fieldName.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        fieldName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNameActionPerformed(evt);
            }
        });

        buttSelectIng.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        buttSelectIng.setText(bundle.getString("selectIngredients")); // NOI18N
        buttSelectIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttSelectIngActionPerformed(evt);
            }
        });

        checkByDuration.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        checkByDuration.setText(bundle.getString("searchByDuration")); // NOI18N
        checkByDuration.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        checkByDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkByDurationActionPerformed(evt);
            }
        });

        checkByIngredients.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        checkByIngredients.setText(bundle.getString("searchByIngredients")); // NOI18N

        checkByName.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        checkByName.setText(bundle.getString("searchByName")); // NOI18N

        comboSearchIngredients.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        comboSearchIngredients.setModel(new IngredientComboboxModel());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkByIngredients, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkByDuration, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(6, 6, 6)
                                .addComponent(spinnerTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(comboTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addGap(6, 6, 6)
                                .addComponent(spinnerTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(comboTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(comboSearchIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttSelectIng)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                        .addComponent(buttSearchRec))))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboSearchIngredients, fieldName});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(checkByName)
                            .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spinnerTimeFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(checkByDuration))
                            .addComponent(spinnerTimeTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttSelectIng)
                            .addComponent(checkByIngredients)
                            .addComponent(comboSearchIngredients, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(25, Short.MAX_VALUE))
                    .addComponent(buttSearchRec, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel4, jLabel5});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {spinnerTimeFrom, spinnerTimeTo});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboSearchIngredients, fieldName});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(buttShowDetail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttRemoveRecipe))
                            .addComponent(buttAddRecipe, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buttAddRecipe, buttRemoveRecipe, buttShowDetail});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttAddRecipe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttRemoveRecipe)
                            .addComponent(buttShowDetail)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 547, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabbedPanel.addTab(bundle.getString("recipes"), jPanel1); // NOI18N

        tabbedPanel.setSelectedIndex(1);

        jMenuBar1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        menuFile.setText(bundle.getString("file")); // NOI18N
        menuFile.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        menuShowRecipes.setText(bundle.getString("showAllRecipes")); // NOI18N
        menuShowRecipes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuShowRecipesMouseClicked(evt);
            }
        });
        menuShowRecipes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowRecipesActionPerformed(evt);
            }
        });
        menuFile.add(menuShowRecipes);

        menuShowIngredience.setText(bundle.getString("showAllIngredients")); // NOI18N
        menuShowIngredience.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuShowIngredienceActionPerformed(evt);
            }
        });
        menuFile.add(menuShowIngredience);

        menuExit.setText(bundle.getString("exitProgram")); // NOI18N
        menuExit.setLabel(bundle.getString("exitProgram")); // NOI18N
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        menuFile.add(menuExit);

        jMenuBar1.add(menuFile);

        menuEdit.setText(bundle.getString("edit")); // NOI18N
        menuEdit.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N

        menuAddRecipe.setText(bundle.getString("addNewRecipe")); // NOI18N
        menuAddRecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddRecipeActionPerformed(evt);
            }
        });
        menuEdit.add(menuAddRecipe);

        menuAddIng.setText(bundle.getString("addNewIngredient")); // NOI18N
        menuAddIng.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddIngActionPerformed(evt);
            }
        });
        menuEdit.add(menuAddIng);

        jMenuBar1.add(menuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tabbedPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tabbedPanel))
        );

        tabbedPanel.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuAddRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddRecipeActionPerformed
        buttAddRecipeActionPerformed(evt);
    }//GEN-LAST:event_menuAddRecipeActionPerformed

    private void buttEditIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttEditIngActionPerformed
        int rowNum = tableIngredient.getSelectedRow();
        if (rowNum == -1) {
            return;
        }

        IngredientTableModel model = (IngredientTableModel) tableIngredient.getModel();
                
        javax.swing.JFrame editIng = new AddEditIngredient(model.getValueByRow(rowNum));
        editIng.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        editIng.setVisible(true);
    }//GEN-LAST:event_buttEditIngActionPerformed

    private void fieldIngredientNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldIngredientNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldIngredientNameActionPerformed

    private void fieldNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNameActionPerformed

    private void checkByDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkByDurationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkByDurationActionPerformed

    private void menuShowRecipesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuShowRecipesMouseClicked
    }//GEN-LAST:event_menuShowRecipesMouseClicked

    private void menuShowRecipesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowRecipesActionPerformed
        tabbedPanel.setSelectedIndex(1);
        buttSearchRecActionPerformed(new java.awt.event.ActionEvent(new Object(), 0, "command"));
    }//GEN-LAST:event_menuShowRecipesActionPerformed

    private void menuShowIngredienceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuShowIngredienceActionPerformed
        tabbedPanel.setSelectedIndex(0);
        buttSearchIngActionPerformed(new java.awt.event.ActionEvent(new Object(), 0, "command"));
    }//GEN-LAST:event_menuShowIngredienceActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuAddIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddIngActionPerformed
        buttAddIngActionPerformed(evt);
    }//GEN-LAST:event_menuAddIngActionPerformed

    private void buttSelectIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttSelectIngActionPerformed
        javax.swing.JFrame ingFilter = new FilterByIngredientForm(this);
        ingFilter.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        ingFilter.setVisible(true);
    }//GEN-LAST:event_buttSelectIngActionPerformed

    private void buttShowDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttShowDetailActionPerformed
        RecipeTableModel tabMod = (RecipeTableModel) tableRecipe.getModel();
        int rowNum = tableRecipe.getSelectedRow();
        if (rowNum == -1) {
            return;
        }
        Recipe rec = tabMod.getValueByRow(rowNum);

        javax.swing.JFrame recDetail = new RecipeDetail(rec.getId());
        recDetail.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        recDetail.setVisible(true);
    }//GEN-LAST:event_buttShowDetailActionPerformed

    private void buttAddRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttAddRecipeActionPerformed
        javax.swing.JFrame editRec = new EditRecipe(null);
        editRec.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        editRec.setVisible(true);
    }//GEN-LAST:event_buttAddRecipeActionPerformed

    private void buttAddIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttAddIngActionPerformed
        javax.swing.JFrame editIng = new AddEditIngredient(null);
        editIng.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        editIng.setVisible(true);
    }//GEN-LAST:event_buttAddIngActionPerformed

    private static List<java.awt.Component> getAllComponents(final java.awt.Container c) {
        java.awt.Component[] comps = c.getComponents();
        List<java.awt.Component> compList = new ArrayList<>();
        for (java.awt.Component comp : comps) {
            compList.add(comp);
            if (comp instanceof java.awt.Container) {
                compList.addAll(getAllComponents((java.awt.Container) comp));
            }
        }
        return compList;
    }

    private Duration makeDuration(Integer number, String unit) {
        if (number == 0) {
            return null;
        }

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mycompany/cookbook/gui/Bundle");

        if (unit.equals(bundle.getString("minute(s)"))) {
            return Duration.ofMinutes(number);
        }
        if (unit.equals(bundle.getString("hour(s)"))) {
            return Duration.ofHours(number);
        }

        return Duration.ofDays(number);
    }

    private List<Ingredient> makeIngredients() {
        List<Ingredient> ingrs = new ArrayList<>();

        IngredientComboboxModel model = (IngredientComboboxModel) comboSearchIngredients.getModel();
        ingrs.addAll(model.getAllItems());

        return ingrs;
    }


    private void buttSearchRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttSearchRecActionPerformed
        ((RecipeTableModel) tableRecipe.getModel()).clear();

        String name = "";
        Duration from = null;
        Duration to = null;
        List<Ingredient> ingrs = new ArrayList<>();

        if (checkByDuration.isSelected()) {
            Integer fromInt = (Integer) spinnerTimeFrom.getValue();
            String fromString = (String) comboTimeFrom.getSelectedItem();
            Integer toInt = (Integer) spinnerTimeTo.getValue();
            String toString = (String) comboTimeTo.getSelectedItem();
            from = makeDuration(fromInt, fromString);
            to = makeDuration(toInt, toString);
        }

        if (checkByIngredients.isSelected()) {
            ingrs = makeIngredients();
        }

        if (checkByName.isSelected()) {
            name = fieldName.getText();
        }

        new SearchRecipeWorker(name, from, to, ingrs).execute();
        
        buttShowDetail.setEnabled(false);
        buttRemoveRecipe.setEnabled(false);
    }//GEN-LAST:event_buttSearchRecActionPerformed

    private void buttSearchIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttSearchIngActionPerformed
        ((IngredientTableModel) tableIngredient.getModel()).clear();

        String name = fieldIngredientName.getText();
        new SearchIngredientWorker(name).execute();
        
        buttEditIng.setEnabled(false);
        buttRemoveIng.setEnabled(false);
    }//GEN-LAST:event_buttSearchIngActionPerformed

    private int messageDialog() {

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mycompany/cookbook/gui/Bundle");
        Object[] options = {bundle.getString("yes"), bundle.getString("no")};

        int n = JOptionPane.showOptionDialog(this, bundle.getString("confirm delete"), "",
                JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);

        return n;
    }

    private void buttRemoveIngActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttRemoveIngActionPerformed
        int rowNum = tableIngredient.getSelectedRow();
        if (rowNum == -1) {
            return;
        }

        if (messageDialog() == 1) {
            return;
        }

        IngredientTableModel model = (IngredientTableModel) tableIngredient.getModel();
        Long ingId = model.getValueByRow(rowNum).getId();

        (new RemoveIngredientWorker(ingId, this)).execute();

    }//GEN-LAST:event_buttRemoveIngActionPerformed

    private void buttRemoveRecipeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttRemoveRecipeActionPerformed
        int rowNum = tableRecipe.getSelectedRow();
        if (rowNum == -1) {
            return;
        }

        if (messageDialog() == 1) {
            return;
        }

        RecipeTableModel model = (RecipeTableModel) tableRecipe.getModel();
        Long ingId = model.getValueByRow(rowNum).getId();

        (new RemoveRecipeWorker(ingId)).execute();
    }//GEN-LAST:event_buttRemoveRecipeActionPerformed

    private void tabbedPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabbedPanelFocusGained

    }//GEN-LAST:event_tabbedPanelFocusGained

    private void tableRecipeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableRecipeMouseClicked
        if(tableRecipe.getSelectedRow()>-1){
            buttShowDetail.setEnabled(true);
            buttRemoveRecipe.setEnabled(true);
        }
    }//GEN-LAST:event_tableRecipeMouseClicked

    private void tableIngredientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableIngredientMouseClicked
        if(tableIngredient.getSelectedRow()>-1){
            buttEditIng.setEnabled(true);
            buttRemoveIng.setEnabled(true);
        }
    }//GEN-LAST:event_tableIngredientMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            LOG.error(ex.getMessage());
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainForm().setVisible(true);
        });
    }
    
    public void setIngredientFilter(List<Ingredient> items){
        IngredientComboboxModel model = (IngredientComboboxModel) comboSearchIngredients.getModel();
        for(Ingredient i:items){
            model.addItem(i);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttAddIng;
    private javax.swing.JButton buttAddRecipe;
    private javax.swing.JButton buttEditIng;
    private javax.swing.JButton buttRemoveIng;
    private javax.swing.JButton buttRemoveRecipe;
    private javax.swing.JButton buttSearchIng;
    private javax.swing.JButton buttSearchRec;
    private javax.swing.JButton buttSelectIng;
    private javax.swing.JButton buttShowDetail;
    private javax.swing.JCheckBox checkByDuration;
    private javax.swing.JCheckBox checkByIngredients;
    private javax.swing.JCheckBox checkByName;
    private javax.swing.JComboBox<String> comboSearchIngredients;
    private javax.swing.JComboBox<String> comboTimeFrom;
    private javax.swing.JComboBox<String> comboTimeTo;
    private javax.swing.JTextField fieldIngredientName;
    private javax.swing.JTextField fieldName;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem menuAddIng;
    private javax.swing.JMenuItem menuAddRecipe;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuShowIngredience;
    private javax.swing.JMenuItem menuShowRecipes;
    private javax.swing.JSpinner spinnerTimeFrom;
    private javax.swing.JSpinner spinnerTimeTo;
    private javax.swing.JTabbedPane tabbedPanel;
    private javax.swing.JTable tableIngredient;
    private javax.swing.JTable tableRecipe;
    // End of variables declaration//GEN-END:variables

    private class SearchRecipeWorker extends SwingWorker<List<Recipe>, Void> {

        private String name;
        private Duration from;
        private Duration to;
        private List<Ingredient> ingrs;

        public SearchRecipeWorker(String name, Duration from, Duration to, List<Ingredient> ingrs) {
            this.name = name;
            this.from = from;
            this.to = to;
            this.ingrs = ingrs;
        }

        @Override
        protected List<Recipe> doInBackground() throws Exception {
            return new RecipeManagerImpl().search(name, from, to, ingrs);
        }

        @Override
        protected void done() {
            RecipeTableModel model = (RecipeTableModel) tableRecipe.getModel();
            try {
                List<Recipe> recipes = this.get();

                for (Recipe rec : recipes) {
                    model.addItem(rec);
                }
            } catch (InterruptedException | ExecutionException ex) {
                LOG.error(ex.getMessage());
            }

        }
    }

    private class SearchIngredientWorker extends SwingWorker<List<Ingredient>, Void> {

        private String name;

        public SearchIngredientWorker(String name) {
            this.name = name;
        }

        @Override
        protected List<Ingredient> doInBackground() throws Exception {
            return new IngredientManagerImpl().searchByName(name);
        }

        @Override
        protected void done() {
            IngredientTableModel model = (IngredientTableModel) tableIngredient.getModel();
            try {
                List<Ingredient> ingres = this.get();

                for (Ingredient ing : ingres) {
                    model.addItem(ing);
                }
            } catch (InterruptedException | ExecutionException ex) {
                LOG.error(ex.getMessage());
            }

        }

    }

    private class RemoveIngredientWorker extends SwingWorker<Integer, Void> {

        private Long id;
        private JFrame frame;

        public RemoveIngredientWorker(Long id, JFrame frame) {
            this.id = id;
            this.frame = frame;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            try {
                (new IngredientManagerImpl()).deleteIngredient(id);
                return 1;
            } catch (ServiceFailureException ex) {
                return null;
            }
        }

        @Override
        protected void done() {
            java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/mycompany/cookbook/gui/Bundle");
            try {
                Integer corr = this.get();
                if (corr == null) {
                    JOptionPane.showMessageDialog(frame,
                            bundle.getString("ingredient in use"),
                            "",
                            JOptionPane.ERROR_MESSAGE);
                }

            } catch (InterruptedException | ExecutionException ex) {
                LOG.error(ex.getMessage());
            }

            buttSearchIngActionPerformed(new java.awt.event.ActionEvent(new Object(), 0, "command"));
        }
    }

    private class RemoveRecipeWorker extends SwingWorker<Integer, Void> {

        private Long id;

        public RemoveRecipeWorker(Long id) {
            this.id = id;
        }

        @Override
        protected Integer doInBackground() throws Exception {
            IngredientAmountManagerImpl man = new IngredientAmountManagerImpl();
            List<IngredientAmount> list = man.getIngredientsByRecipe(id);
            for (IngredientAmount amount : list) {
                man.deleteIngredientFromRecipe(amount.getId());
            }

            (new RecipeManagerImpl()).deleteRecipe(id);
            return null;
        }

        @Override
        protected void done() {
            buttSearchRecActionPerformed(new java.awt.event.ActionEvent(new Object(), 0, "command"));
        }
    }
}
